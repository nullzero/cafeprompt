#!/usr/bin/ruby

require 'fileutils'
require File.dirname(__FILE__) + '/graderutils.rb'

def read_contest_dat(cafeprompt_dir, year, contest)
	year_file = "#{cafeprompt_dir}/config/COCI/#{year}"
	abort('No year : ' + year) if !FileTest.exist?(year_file)
	h = GraderUtils.create_hash( GraderUtils.readfile(year_file) )
	h['year:'] = year
	h['contest:'] = contest
	return h
end

def validate(info)
	contest = info['contest:']
	if !info.has_key?(contest + ':')
		return false if contest.to_i < 1
		return false if info['status:'] == 'fin' &&
						info['allcontest:'].to_i < contest.to_i
		return false if info['status:'] != 'fin' &&
						info['status:'].to_i < contest.to_i
		# pass by ref
		info['contest:'] = 'contest' + contest
	else
		return false if info[contest + ':'] != 'true'
	end
	return true
end

def wget(url)
	`#{"wget #{url} 2>&1 | sed -u 's/.* \\([0-9]\\+%\\)\\ \
\\+\\([0-9.]\\+.\\)\\(.*\\)/\\1\\n# Downloading at \\2\\/s, ETA \\3/' \
| zenity --width=400 --progress --title=\"Downloading \
#{File.basename(url)}\" --auto-close --no-cancel"}`
end

def download(info)
	year = info['year:'].to_i
	contest = info['contest:']
	puts "Downloading #{year} #{contest}"
	if info['status:'] != 'fin'
		wget("http://hsin.hr/coci/#{contest}_solutions.zip")
		wget("http://hsin.hr/coci/#{contest}_testdata.zip")
		wget("http://hsin.hr/coci/#{contest}_tasks.pdf")
	else
		wget("http://hsin.hr/coci/archive/#{year}_#{year+1}/\
#{contest}_solutions.zip")
		wget("http://hsin.hr/coci/archive/#{year}_#{year+1}/\
#{contest}_testdata.zip")
		wget("http://hsin.hr/coci/archive/#{year}_#{year+1}/\
#{contest}_tasks.pdf")
	end
end

def process(dir, cafeprompt_dir, task_path)
	input = Dir[dir + '/*.in.*']
	input.sort!
	count = 0
	input.each do |file|
		count += 1
		FileUtils.mv(file, "#{dir}/#{count}.in")
	end
	output = Dir[dir + '/*.out.*']
	output.sort!
	count = 0
	output.each do |file|
		count += 1
		FileUtils.mv(file, "#{dir}/#{count}.sol")
	end
	prob_name = File.basename(dir)
	absolute_prob = "#{cafeprompt_dir}/problemset/#{prob_name}"
	FileUtils.mv(dir, absolute_prob)
	FileUtils.cp(task_path, "#{absolute_prob}/#{prob_name}.pdf")
end

########################################################################

cafeprompt_dir, path_config = GraderUtils.initial(__FILE__)
current_dir = '/tmp/cafeprompt'
FileUtils.mkdir_p(current_dir)
FileUtils.cd(current_dir)
year = "#{ARGV[0]}"
contest = "#{ARGV[1]}"
abort('No year : ' + year) if !(year =~ /^[0-9]+/)
info = read_contest_dat(cafeprompt_dir, year, contest)
abort('No contest : ' + contest) if !validate(info)
contest = info["contest:"]
download(info)
task_path = "#{current_dir}/#{contest}_tasks.pdf"
solution_path = "#{current_dir}/#{contest}_solutions.zip"
testdata_zip = "#{current_dir}/#{contest}_testdata.zip"
testdata_path = nil
`unzip #{testdata_zip}`
allfiles = Dir[current_dir + '/*']
# 1) task.pdf 2) testdata.zip 3) official 4) example 5) solution.zip
if allfiles.length == 5
	allfiles.each do |f|
		if f =~ /^official.+/
			testdata_path = f
			break
		end
	end
else
	testdata_path = current_dir
end
abort('Testdata path not exist') if !testdata_path
allproblems = Dir[testdata_path + '/*']
allproblems.each do |f|
	if FileTest.directory?(f)
		process(f, cafeprompt_dir, task_path)
	end
end
FileUtils.mv(solution_path, 
			"#{cafeprompt_dir}/solution/#{year}.#{contest}.zip")
FileUtils.remove_dir(current_dir)
