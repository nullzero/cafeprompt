#!/usr/bin/ruby

problem_home = ENV['PROBLEM_HOME']
require "#{problem_home}/script/test_dsl.rb"

if ARGV.length < 2
  puts "Usage: check <language> <test-number> [<output-file>]"
  exit(0)
end

language = ARGV[0]
test_num = ARGV[1].to_i
if ARGV.length >= 3
  output_file_name = ARGV[2]
else
  output_file_name = "output.txt"
end

load "#{problem_home}/test_cases/all_tests.cfg"
problem = Problem.get_instance

output_file = File.new(output_file_name, "r")
answer_file = File.new("#{problem_home}/test_cases/#{test_num}/answer-#{test_num}.txt")
result_file = File.new("check_result", "w")

output_file_content = output_file.read
answer_file_content = answer_file.read

report_correct = lambda {
  result_file.write "Correct\n"
  result_file.write problem.get_score(test_num)
  result_file.write "\n"  
  result_file.close
  exit(0)
}

report_wrong = lambda {
  result_file.write "Incorrect\n"
  result_file.write "0\n"
  result_file.close
  exit(0)
}

num_pattern = /^[0-9]*/
out_items = output_file_content.split
ans_items = answer_file_content.split
map = []
for i in 1 .. 100
	map[i] = []
	for j in 1 .. 100
		map[i][j] = 0
	end
end
for k in 0 .. 1
	x = ans_items[3*k+0].to_i
	y = ans_items[3*k+1].to_i
	s = ans_items[3*k+2].to_i
	for i in 0 .. s - 1
		for j in 0 .. s - 1
			map[x+i][y+j] = 1
		end
	end
end

k=0
report_wrong.call if (out_items[3*k+0] =~ num_pattern) == nil
report_wrong.call if (out_items[3*k+1] =~ num_pattern) == nil
report_wrong.call if (out_items[3*k+2] =~ num_pattern) == nil
x = out_items[3*k+0].to_i
y = out_items[3*k+1].to_i
s = out_items[3*k+2].to_i
report_wrong.call if (x < 1 || x > 100 || y < 1 || y > 100)
report_wrong.call if (s <= 0)
report_wrong.call if (x+s-1 > 100 || y+s-1 > 100)
for i in 0 ... s
	for j in 0 ... s
		if map[x+i][y+j] == 1
			map[x+i][y+j] = 2
		else
			report_wrong.call
		end
	end
end

k=1
report_wrong.call if (out_items[3*k+0] =~ num_pattern) == nil
report_wrong.call if (out_items[3*k+1] =~ num_pattern) == nil
report_wrong.call if (out_items[3*k+2] =~ num_pattern) == nil
x = out_items[3*k+0].to_i
y = out_items[3*k+1].to_i
s = out_items[3*k+2].to_i
report_wrong.call if (x < 1 || x > 100 || y < 1 || y > 100)
report_wrong.call if (s <= 0)
report_wrong.call if (x+s-1 > 100 || y+s-1 > 100)
for i in 0 ... s
	for j in 0 ... s
		if map[x+i][y+j] != 0
			map[x+i][y+j] = 2
		else
			report_wrong.call
		end
	end
end
for i in 1 .. 100
	for j in 1 .. 100
		report_wrong.call if map[i][j] == 1
	end
end
report_correct.call
