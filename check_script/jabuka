#!/usr/bin/ruby

problem_home = ENV['PROBLEM_HOME']
require "#{problem_home}/script/test_dsl.rb"

if ARGV.length < 2
  puts "Usage: check <language> <test-number> [<output-file>]"
  exit(0)
end

language = ARGV[0]
test_num = ARGV[1].to_i
if ARGV.length >= 3
  output_file_name = ARGV[2]
else
  output_file_name = "output.txt"
end

load "#{problem_home}/test_cases/all_tests.cfg"
problem = Problem.get_instance

output_file = File.new(output_file_name, "r")
answer_file = File.new("#{problem_home}/test_cases/#{test_num}/answer-#{test_num}.txt")
result_file = File.new("check_result", "w")

output_file_content = output_file.read
answer_file_content = answer_file.read

report_correct = lambda {
  result_file.write "Correct\n"
  result_file.write problem.get_score(test_num)
  result_file.write "\n"  
  result_file.close
  exit(0)
}

report_wrong = lambda {
  result_file.write "Incorrect\n"
  result_file.write "0\n"
  result_file.close
  exit(0)
}

def gcdf(a,b)
	return a if b == 0 
	return gcdf(b,a%b)
end

num_pattern = /^[0-9]*/
out_items = output_file_content.split
ans_items = answer_file_content.split

all = ans_items.length
all_c = out_items.length
report_wrong.call if(all != all_c)

mm = ans_items[0].to_i
aa = ans_items[1].to_i * mm
bb = ans_items[2].to_i * mm
gcd = gcdf(aa,bb)
lim = Math.sqrt(gcd).to_i

acheck = []
rcheck = []

i = 0
while i < all
	report_wrong.call if (out_items[i] =~ num_pattern) == nil
	report_wrong.call if (out_items[i+1] =~ num_pattern) == nil
	report_wrong.call if (out_items[i+2] =~ num_pattern) == nil
	m = out_items[i].to_i
	a = out_items[i+1].to_i
	b = out_items[i+2].to_i
	report_wrong.call if (m*a != aa) || (m*b != bb)
	if m <= lim
		report_wrong.call if acheck[m] == 1
		acheck[m] = 1;
	else 
		m = gcd / m
		report_wrong.call if rcheck[m] == 1
		rcheck[m] = 1;
	end
	i += 3
end
report_correct.call
