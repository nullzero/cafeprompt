#!/usr/bin/ruby

require 'fileutils'

def error
	abort("Error")
end

def read_contest_dat(cafe_path, year, contest)
	config_dir = cafe_path + "/config/COCI"
	return nil if !FileTest.exist?(config_dir + "/#{year}")
	dat_fp = File.new(config_dir + "/#{year}")
	data = dat_fp.read
	dat_fp.close
	h = {}
	data.each_line do |s|
		words = s.split
		h[ words[0] ] = words[1]
	end
	h["year:"] = year.to_i
	h["contest:"] = contest.to_i
	return h
end

def validate(info)
	contest = info["contest:"]
	if !info.has_key?(contest + ':')
		contest = contest.to_i
		return false if contest < 1
		return false if info["status:"] == "fin" &&
						info["allcontest:"].to_i < contest
		return false if info["status:"] != "fin" &&
						info["status:"].to_i < contest
		contest = "contest#{contest}"
	else
		return false if info[contest + ":"] != "true"
	end
	return true
end

def download(info)
	year = info["year:"]
	contest = info["contest:"]
	if info[":status" != "finished"]
		`wget http://hsin.hr/coci/#{contest}_solutions.zip`
		`wget http://hsin.hr/coci/#{contest}_testdata.zip`
		`wget http://hsin.hr/coci/#{contest}_tasks.pdf`
	else
		`wget http://hsin.hr/coci/archive/#{year}_#{year+1}/#{contest}_solutions.zip`
		`wget http://hsin.hr/coci/archive/#{year}_#{year+1}/#{contest}_testdata.zip`
		`wget http://hsin.hr/coci/archive/#{year}_#{year+1}/#{contest}_tasks.pdf`
	end
end

def process(path, cafe_path, task_path)
	input = Dir[path + '/*.in.*']
	input.sort!
	count = 0
	input.each do |file|
		count += 1
		FileUtils.mv(file, path + "/#{count}.in")
	end
	output = Dir[path + '/*.out.*']
	output.sort!
	count = 0
	output.each do |file|
		count += 1
		FileUtils.mv(file, path + "/#{count}.sol")
	end
	prob_name = File.basename(path)
	absolute_prob = cafe_path + "/problemset/#{prob_name}"
	FileUtils.mv(path, absolute_prob)
	FileUtils.cp(task_path, absolute_prob + "/#{prob_name}.pdf")
end

home_path = File.expand_path("~");
cafe_path = home_path + "/cafe_grader/cafeprompt"
current_dir = "/tmp/cafeprompt"
FileUtils.mkdir_p(current_dir)
FileUtils.cd(current_dir)

year = "#{ARGV[0]}"
contest = "#{ARGV[1]}"
error if !(year =~ /^[0-9]+/)
error if !(info = read_contest_dat(cafe_path, year, contest))
error if !validate(info)
download(info)

# For TASK
task_path = current_dir + "/#{contest}_tasks.pdf"

# For SOLUTION
solution_path = current_dir + "/#{contest}_solutions.zip"
FileUtils.mv(solution_path, cafe_path + "/solution/#{year}.#{contest}.zip")

# For TESTDATA
testdata_zip = current_dir + "/#{contest}_testdata.zip"
testdata_path = nil
`unzip #{testdata_zip}`
if info["sample:"] == "yes"
	allfiles = Dir[current_dir + '/*']
	allfiles.each do |f|
		if FileTest.directory?(f) && f =~ /official/
			testdata_path = current_dir + '/' + f
			break
		end
	end
else
	testdata_path = current_dir
end
allproblems = Dir[testdata_path + '/*']
allproblems.each do |f|
	if FileTest.directory?(f)
		process(f, cafe_path, task_path)
	end
end
FileUtils.rmdir(current_dir)
